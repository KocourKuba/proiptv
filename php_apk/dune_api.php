<?php

# This is an autogenerated file! DO NOT change it manually.

# Hard-coded constants.
define('VALIGN_TOP',       0);
define('VALIGN_CENTER',    1);
define('VALIGN_BOTTOM',    2);

define('HALIGN_LEFT',      0);
define('HALIGN_CENTER',    1);
define('HALIGN_RIGHT',     2);

define('FONT_SIZE_NORMAL', 0);
define('FONT_SIZE_SMALL',  1);
define('FONT_SIZE_LARGE',  4);

define('CYCLE_MODE_GAP_AUTO',    0);
define('CYCLE_MODE_GAP_YES',     1);
define('CYCLE_MODE_GAP_NO',      2);

define('ORIENTATION_VERTICAL',   0);
define('ORIENTATION_HORIZONTAL', 1);

define('USE_TZ_GMT',      0);
define('USE_TZ_LOCAL',    1);
define('USE_TZ_NONE',     2);

define('EPG_START_OVER_ENABLED',    4);
define('EPG_START_OVER_DISABLED',   8);
define('EPG_TRICK_PLAY_ENABLED',    16);

define('GUI_ACTION_FLAG_SKIP_ON_PLAY_RESTART',  1);

define ('CHANGE_OP_ADD', 2);
define ('CHANGE_OP_DELETE', 3);
define ('CHANGE_OP_DELETE_ANDROID_APPS_EXCEPT', 101);
define ('CHANGE_OP_NOP', 0);
define ('CHANGE_OP_REPLACE', 1);
define ('CHANGE_OP_TOGGLE', 4);
define ('GCOMP_OPT_APPEAR_WITH_FADE', 0x100);
define ('GCOMP_OPT_BG_PICTURE', 0x8);
define ('GCOMP_OPT_EMPTY_WITH_VIDEO', 0x20);
define ('GCOMP_OPT_FOCUS', 0x100000);
define ('GCOMP_OPT_IMG_CHECK_EFF_URL', 0x200000);
define ('GCOMP_OPT_NO_CLIP', 0x4);
define ('GCOMP_OPT_NO_PREPAINT', 0x2);
define ('GCOMP_OPT_PREPAINT', 0x1);
define ('GCOMP_OPT_TRANSPARENT_WITH_VIDEO', 0x10);
define ('GCOMP_OPT_TTF_COMPACT_HEIGHT', 0x2000);
define ('GCOMP_OPT_TTF_LAYOUT_FIX', 0x1000);
define ('PLUGIN_ROW_OPT_FIRST_IN_CLUSTER', 0x1);
define ('PLUGIN_ROW_OPT_FIRST_WITH_INFO', 0x2);

# enum DialogFrameStyle
define ('DIALOG_FRAME_STYLE_DEFAULT',                    'default');
define ('DIALOG_FRAME_STYLE_GLASS',                      'glass');
define ('DIALOG_FRAME_STYLE_TRANSPARENT',                'transparent');
define ('DIALOG_FRAME_STYLE_PLAYBACK_INFO',              'playback_info');

# enum GCompFocusType
define ('GCOMP_FOCUS_NONE',                              'none');
define ('GCOMP_FOCUS_SYSTEM',                            'system');
define ('GCOMP_FOCUS_DEFAULT_CUT_IMAGE',                 'default_cut_image');
define ('GCOMP_FOCUS_INACTIVE_CUT_IMAGE',                'inactive_cut_image');
define ('GCOMP_FOCUS_DEFAULT_RECT',                      'default_rect');
define ('GCOMP_FOCUS_RECT2',                             'rect2');
define ('GCOMP_FOCUS_RECT3',                             'rect3');

# enum GCompItemType
define ('GCOMP_ITEM_REGULAR',                            'regular');
define ('GCOMP_ITEM_LABEL',                              'label');
define ('GCOMP_ITEM_BUTTON',                             'button');
define ('GCOMP_ITEM_TEXT_FIELD',                         'text_field');

# enum GCompLayoutRole
define ('GCOMP_LAYOUT_UNSET',                            'unset');
define ('GCOMP_LAYOUT_TOP',                              'top');
define ('GCOMP_LAYOUT_BOTTOM',                           'bottom');
define ('GCOMP_LAYOUT_LEFT',                             'left');
define ('GCOMP_LAYOUT_RIGHT',                            'right');
define ('GCOMP_LAYOUT_CENTER',                           'center');

# enum GCompTextFit
define ('GCOMP_TEXT_FIT_CROP',                           'crop');
define ('GCOMP_TEXT_FIT_INSERT_ELLIPSIS',                'insert_ellipsis');
define ('GCOMP_TEXT_FIT_APPEND_ELLIPSIS',                'append_ellipsis');

# enum GCompTransition
define ('GCOMP_TRANSITION_NONE',                         'none');
define ('GCOMP_TRANSITION_LAST_STEP',                    'last_step');
define ('GCOMP_TRANSITION_DEFAULT',                      'default');
define ('GCOMP_TRANSITION_FADE',                         'fade');

# enum GComponentKind
define ('GCOMPONENT_LABEL',                              'label');
define ('GCOMPONENT_TTF_LABEL',                          'ttf_label');
define ('GCOMPONENT_RECT',                               'rect');
define ('GCOMPONENT_IMAGE',                              'image');
define ('GCOMPONENT_CUT_IMAGE',                          'cut_image');
define ('GCOMPONENT_SANDWICH',                           'sandwich');
define ('GCOMPONENT_BUTTON',                             'button');
define ('GCOMPONENT_TEXT_FIELD',                         'text_field');
define ('GCOMPONENT_PANEL',                              'panel');
define ('GCOMPONENT_SCROLL_PANE',                        'scroll_pane');
define ('GCOMPONENT_PREPAINT_PANE',                      'prepaint_pane');
define ('GCOMPONENT_SCROLLBAR',                          'scrollbar');

# enum GCompsFlipEffect
define ('GCOMPS_FLIP_EFFECT_NONE',                       'none');
define ('GCOMPS_FLIP_EFFECT_FADE',                       'fade');
define ('GCOMPS_FLIP_EFFECT_FADE_OUT_SCALED',            'fade_out_scaled');

# enum GuiControlKind
define ('GUI_CONTROL_LABEL',                             'label');
define ('GUI_CONTROL_PROGRESS_BAR',                      'progress_bar');
define ('GUI_CONTROL_COMBOBOX',                          'combobox');
define ('GUI_CONTROL_TEXT_FIELD',                        'text_field');
define ('GUI_CONTROL_BUTTON',                            'button');
define ('GUI_CONTROL_VGAP',                              'vgap');

# enum GuiEventKind
define ('GUI_EVENT_KEY_ENTER',                           'key_enter');
define ('GUI_EVENT_KEY_PLAY',                            'key_play');
define ('GUI_EVENT_KEY_A_RED',                           'key_a_red');
define ('GUI_EVENT_KEY_B_GREEN',                         'key_b_green');
define ('GUI_EVENT_KEY_C_YELLOW',                        'key_c_yellow');
define ('GUI_EVENT_KEY_D_BLUE',                          'key_d_blue');
define ('GUI_EVENT_KEY_POPUP_MENU',                      'key_popup_menu');
define ('GUI_EVENT_KEY_INFO',                            'key_info');
define ('GUI_EVENT_KEY_LEFT',                            'key_left');
define ('GUI_EVENT_KEY_RIGHT',                           'key_right');
define ('GUI_EVENT_KEY_UP',                              'key_up');
define ('GUI_EVENT_KEY_DOWN',                            'key_down');
define ('GUI_EVENT_KEY_P_PLUS',                          'key_p_plus');
define ('GUI_EVENT_KEY_P_MINUS',                         'key_p_minus');
define ('GUI_EVENT_KEY_NEXT',                            'key_next');
define ('GUI_EVENT_KEY_PREV',                            'key_prev');
define ('GUI_EVENT_KEY_FIP_NEXT',                        'key_fip_next');
define ('GUI_EVENT_KEY_FIP_PREV',                        'key_fip_prev');
define ('GUI_EVENT_KEY_SETUP',                           'key_setup');
define ('GUI_EVENT_KEY_RETURN',                          'key_return');
define ('GUI_EVENT_KEY_SELECT',                          'key_select');
define ('GUI_EVENT_KEY_CLEAR',                           'key_clear');
define ('GUI_EVENT_KEY_PAUSE',                           'key_pause');
define ('GUI_EVENT_KEY_FWD',                             'key_fwd');
define ('GUI_EVENT_KEY_REW',                             'key_rew');
define ('GUI_EVENT_KEY_SLOW',                            'key_slow');
define ('GUI_EVENT_KEY_STOP',                            'key_stop');
define ('GUI_EVENT_KEY_TOP_MENU',                        'key_top_menu');
define ('GUI_EVENT_KEY_POWER',                           'key_power');
define ('GUI_EVENT_KEY_EJECT',                           'key_eject');
define ('GUI_EVENT_KEY_MODE',                            'key_mode');
define ('GUI_EVENT_KEY_VENDOR',                          'key_vendor');
define ('GUI_EVENT_KEY_SHUFFLE',                         'key_shuffle');
define ('GUI_EVENT_KEY_MUSIC',                           'key_music');
define ('GUI_EVENT_KEY_MUTE',                            'key_mute');
define ('GUI_EVENT_KEY_V_PLUS',                          'key_v_plus');
define ('GUI_EVENT_KEY_V_MINUS',                         'key_v_minus');
define ('GUI_EVENT_KEY_SEARCH',                          'key_search');
define ('GUI_EVENT_KEY_ZOOM',                            'key_zoom');
define ('GUI_EVENT_KEY_SUBTITLE',                        'key_subtitle');
define ('GUI_EVENT_KEY_REPEAT',                          'key_repeat');
define ('GUI_EVENT_KEY_AUDIO',                           'key_audio');
define ('GUI_EVENT_KEY_REC',                             'key_rec');
define ('GUI_EVENT_KEY_DUNE',                            'key_dune');
define ('GUI_EVENT_KEY_URL',                             'key_url');
define ('GUI_EVENT_KEY_0',                               'key_0');
define ('GUI_EVENT_KEY_1',                               'key_1');
define ('GUI_EVENT_KEY_2',                               'key_2');
define ('GUI_EVENT_KEY_3',                               'key_3');
define ('GUI_EVENT_KEY_4',                               'key_4');
define ('GUI_EVENT_KEY_5',                               'key_5');
define ('GUI_EVENT_KEY_6',                               'key_6');
define ('GUI_EVENT_KEY_7',                               'key_7');
define ('GUI_EVENT_KEY_8',                               'key_8');
define ('GUI_EVENT_KEY_9',                               'key_9');
define ('GUI_EVENT_UI_ACTION',                           'ui_action');
define ('GUI_EVENT_TIMER',                               'timer');
define ('GUI_EVENT_PLUGIN_ROWS_INFO_UPDATE',             'plugin_rows_info_update');
define ('GUI_EVENT_FOLDER_LEAVE',                        'folder_leave');
define ('GUI_EVENT_FOLDER_ENTER',                        'folder_enter');
define ('GUI_EVENT_FOLDER_RETURN_BACK',                  'folder_return_back');
define ('GUI_EVENT_PLAYBACK_STOP',                       'playback_stop');
define ('GUI_EVENT_PLAYBACK_GOING_TO_SWITCH',            'playback_going_to_switch');
define ('GUI_EVENT_PLAYBACK_SWITCHED',                   'playback_switched');
define ('GUI_EVENT_PLAYBACK_USER_ACTION',                'playback_user_action');
define ('GUI_EVENT_PLAYBACK_STATE_CHANGED',              'playback_state_changed');
define ('GUI_EVENT_MENU_PLAYBACK_OSD_CLOSED',            'menu_playback_osd_closed');
define ('GUI_EVENT_MENU_PLAYBACK_OSD_GOING_TO_OPEN',     'menu_playback_osd_going_to_open');
define ('GUI_EVENT_MENU_PLAYBACK_FINISH',                'menu_playback_finish');
define ('GUI_EVENT_MENU_EXT_APP_FINISH',                 'menu_ext_app_finish');
define ('GUI_EVENT_WEB_BROWSER_FINISH',                  'web_browser_finish');
define ('GUI_EVENT_BOOT',                                'boot');
define ('GUI_EVENT_BOOT_END',                            'boot_end');
define ('GUI_EVENT_INSTALL',                             'install');
define ('GUI_EVENT_UPDATE',                              'update');
define ('GUI_EVENT_UNINSTALL',                           'uninstall');
define ('GUI_EVENT_GOING_TO_UPDATE',                     'going_to_update');
define ('GUI_EVENT_GOING_TO_STOP',                       'going_to_stop');
define ('GUI_EVENT_GUI_START',                           'gui_start');
define ('GUI_EVENT_EARLY_GUI_START',                     'early_gui_start');
define ('GUI_EVENT_STORAGE_DETECTED_MENU',               'storage_detected_menu');
define ('GUI_EVENT_FILE_POPUP_MENU',                     'file_popup_menu');
define ('GUI_EVENT_TOPMENU_POPUP_MENU',                  'topmenu_popup_menu');
define ('GUI_EVENT_GOING_TO_RELOAD_ALL_FOLDERS',         'going_to_reload_all_folders');
define ('GUI_EVENT_FAVORITES_UPDATED',                   'favorites_updated');
define ('GUI_EVENT_SETTINGS_UPDATED',                    'settings_updated');
define ('GUI_EVENT_SHUTDOWN',                            'shutdown');

# enum PluginEpgMode
define ('PLUGIN_EPG_DISABLED',                           'disabled');
define ('PLUGIN_EPG_USE_DAY_REQUEST',                    'use_day_request');
define ('PLUGIN_EPG_GET_FROM_STREAM',                    'get_from_stream');
define ('PLUGIN_EPG_USE_DVB_PROVIDER',                   'use_dvb_provider');

# enum PluginFavoritesOpType
define ('PLUGIN_FAVORITES_OP_ADD',                       'add');
define ('PLUGIN_FAVORITES_OP_REMOVE',                    'remove');
define ('PLUGIN_FAVORITES_OP_MOVE_UP',                   'move_up');
define ('PLUGIN_FAVORITES_OP_MOVE_DOWN',                 'move_down');

# enum PluginFolderViewKind
define ('PLUGIN_FOLDER_VIEW_REGULAR',                    'view_regular');
define ('PLUGIN_FOLDER_VIEW_CONTROLS',                   'view_controls');
define ('PLUGIN_FOLDER_VIEW_MOVIE',                      'view_movie');
define ('PLUGIN_FOLDER_VIEW_GCOMPS',                     'view_gcomps');
define ('PLUGIN_FOLDER_VIEW_ROWS',                       'view_rows');

# enum PluginFontSize
define ('PLUGIN_FONT_NORMAL',                            'normal');
define ('PLUGIN_FONT_SMALL',                             'small');

# enum PluginOperationType
define ('PLUGIN_OP_GET_FOLDER_VIEW',                     'get_folder_view');
define ('PLUGIN_OP_GET_NEXT_FOLDER_VIEW',                'get_next_folder_view');
define ('PLUGIN_OP_GET_REGULAR_FOLDER_ITEMS',            'get_regular_folder_items');
define ('PLUGIN_OP_HANDLE_USER_INPUT',                   'handle_user_input');
define ('PLUGIN_OP_GET_TV_INFO',                         'get_tv_info');
define ('PLUGIN_OP_GET_DAY_EPG',                         'get_day_epg');
define ('PLUGIN_OP_GET_TV_PLAYBACK_URL',                 'get_tv_playback_url');
define ('PLUGIN_OP_GET_TV_STREAM_URL',                   'get_tv_stream_url');
define ('PLUGIN_OP_CHANGE_TV_FAVORITES',                 'change_tv_favorites');
define ('PLUGIN_OP_GET_VOD_INFO',                        'get_vod_info');
define ('PLUGIN_OP_GET_VOD_STREAM_URL',                  'get_vod_stream_url');

# enum PluginOutputDataType
define ('PLUGIN_OUT_DATA_PLUGIN_FOLDER_VIEW',            'plugin_folder_view');
define ('PLUGIN_OUT_DATA_PLUGIN_REGULAR_FOLDER_RANGE',   'plugin_regular_folder_range');
define ('PLUGIN_OUT_DATA_GUI_ACTION',                    'gui_action');
define ('PLUGIN_OUT_DATA_PLUGIN_TV_INFO',                'plugin_tv_info');
define ('PLUGIN_OUT_DATA_PLUGIN_TV_EPG_PROGRAM_LIST',    'plugin_tv_epg_program_list');
define ('PLUGIN_OUT_DATA_URL',                           'url');
define ('PLUGIN_OUT_DATA_PLUGIN_VOD_INFO',               'plugin_vod_info');

# enum PluginRowType
define ('PLUGIN_ROW_TYPE_VGAP',                          'row_vgap');
define ('PLUGIN_ROW_TYPE_GCOMPS',                        'row_gcomps');
define ('PLUGIN_ROW_TYPE_REGULAR',                       'row_regular');
define ('PLUGIN_ROW_TYPE_TITLE',                         'row_title');

# GUI-action ids.
define ('ADD_MENU_ITEMS_ACTION_ID',                      'add_menu_items');
define ('ADD_TO_FAVORITES_ACTION_ID',                    'add_to_favorites');
define ('BLURAY_PLAY_ACTION_ID',                         'bluray_play');
define ('BT_COMMAND_ACTION_ID',                          'bt_command');
define ('CHANGE_BEHAVIOUR_ACTION_ID',                    'change_behaviour');
define ('CHANGE_GCOMPS_ACTION_ID',                       'change_gcomps');
define ('CHANGE_PARENTAL_CODE_ACTION_ID',                'change_parental_code');
define ('CHANGE_SETTINGS_ACTION_ID',                     'change_settings');
define ('CHECK_RESTRICTED_ACTION_ID',                    'check_restricted');
define ('CHECK_SYSTEM_STORAGE_ACTION_ID',                'check_system_storage');
define ('CLEAR_WATCH_HISTORY_ACTION_ID',                 'clear_watch_history');
define ('CLOSE_AND_RUN_ACTION_ID',                       'close_and_run');
define ('CLOSE_DIALOG_AND_RUN_ACTION_ID',                'close_dialog_and_run');
define ('COMPOSITE_ACTION_ID',                           'composite');
define ('CONFIRM_LOCATION_ACTION_ID',                    'confirm_location');
define ('DETECT_SERIES_ACTION_ID',                       'detect_series');
define ('DOWNLOAD_AND_INSTALL_APK_ACTION_ID',            'download_and_install_apk');
define ('DVB_COMMAND_ACTION_ID',                         'dvb_command');
define ('DVD_PLAY_ACTION_ID',                            'dvd_play');
define ('EDIT_LIST_CONFIG_ACTION_ID',                    'edit_list_config');
define ('EDIT_MAIN_SCREEN_ACTION_ID',                    'edit_main_screen');
define ('FILE_PLAY_ACTION_ID',                           'file_play');
define ('INIT_PERSISTFS_ACTION_ID',                      'init_persistfs');
define ('INVALIDATE_FILES_ASSOCIATIONS_ACTION_ID',       'invalidate_files_associations');
define ('LAUNCH_EXT_APP_ACTION_ID',                      'launch_ext_app');
define ('LAUNCH_MEDIA_URL_ACTION_ID',                    'launch_media_url');
define ('OPEN_FOLDER_ACTION_ID',                         'open_folder');
define ('PLAYLIST_PLAY_ACTION_ID',                       'playlist_play');
define ('PLUGIN_CLEAR_ARCHIVE_CACHE_ACTION_ID',          'plugin_clear_archive_cache');
define ('PLUGIN_HANDLE_USER_INPUT_ACTION_ID',            'plugin_handle_user_input');
define ('PLUGIN_INVALIDATE_FOLDERS_ACTION_ID',           'plugin_invalidate_folders');
define ('PLUGIN_OPEN_FOLDER_ACTION_ID',                  'plugin_open_folder');
define ('PLUGIN_REFRESH_ENTRY_POINTS_ACTION_ID',         'plugin_refresh_entry_points');
define ('PLUGIN_REPLACE_PATH_ACTION_ID',                 'plugin_replace_path');
define ('PLUGIN_RUN_NATIVE_CODE_ACTION_ID',              'plugin_run_native_code');
define ('PLUGIN_SHOW_ERROR_ACTION_ID',                   'plugin_show_error');
define ('PLUGIN_SYSTEM_ACTION_ID',                       'plugin_system');
define ('PLUGIN_TV_PLAY_ACTION_ID',                      'plugin_tv_play');
define ('PLUGIN_TV_SELECT_CHANNEL_ACTION_ID',            'plugin_tv_select_channel');
define ('PLUGIN_UPDATE_ARCHIVE_CACHE_ACTION_ID',         'plugin_update_archive_cache');
define ('PLUGIN_UPDATE_EPF_MAPPING_ACTION_ID',           'plugin_update_epf_mapping');
define ('PLUGIN_UPDATE_EPG_ACTION_ID',                   'plugin_update_epg');
define ('PLUGIN_UPDATE_FOLDER_ACTION_ID',                'plugin_update_folder');
define ('PLUGIN_UPDATE_INFO_BLOCK_ACTION_ID',            'plugin_update_info_block');
define ('PLUGIN_UPDATE_OSD_ACTION_ID',                   'plugin_update_osd');
define ('PLUGIN_UPDATE_ROWS_INFO_ACTION_ID',             'plugin_update_rows_info');
define ('PLUGIN_UPDATE_ROWS_MENU_ACTION_ID',             'plugin_update_rows_menu');
define ('PLUGIN_UPDATE_STICKER_ACTION_ID',               'plugin_update_sticker');
define ('PLUGIN_VOD_PLAY_ACTION_ID',                     'plugin_vod_play');
define ('REMOVE_FROM_FAVORITES_ACTION_ID',               'remove_from_favorites');
define ('RENAME_PATH_ACTION_ID',                         'rename_path');
define ('RESET_CONTROLS_ACTION_ID',                      'reset_controls');
define ('RESTART_ACTION_ID',                             'restart');
define ('RUN_BUILTIN_ACTION_ID',                         'run_builtin');
define ('RUN_DEFAULT_ACTION_ID',                         'run_default');
define ('SET_RESTRICTED_ACTION_ID',                      'set_restricted');
define ('SET_TIME_ZONE_ACTION_ID',                       'set_time_zone');
define ('SHOW_BLACK_SCREEN_ACTION_ID',                   'show_black_screen');
define ('SHOW_DIALOG_ACTION_ID',                         'show_dialog');
define ('SHOW_GCOMPS_DIALOG_ACTION_ID',                  'show_gcomps');
define ('SHOW_MAIN_SCREEN_ACTION_ID',                    'show_main_screen');
define ('SHOW_POPUP_MENU_ACTION_ID',                     'show_popup_menu');
define ('SLEEP_ACTION_ID',                               'sleep');
define ('START_SERVICE_ACTION_ID',                       'start_service');
define ('STATUS_ACTION_ID',                              'status');
define ('STOP_PLAYBACK_ACTION_ID',                       'stop_playback');
define ('SWITCH_OSD_MODE_ACTION_ID',                     'switch_osd_mode');
define ('UNINSTALL_APK_ACTION_ID',                       'uninstall_apk');
define ('UPDATE_DVB_CHANNELS_ACTION_ID',                 'update_dvb_channels');
define ('UPDATE_FOLDER_MARKS_ACTION_ID',                 'update_folder_marks');
define ('UPDATE_IMAGES_ACTION_ID',                       'update_images');
define ('UPDATE_TV_INFO_ACTION_ID',                      'update_tv_info');
define ('UPDATE_WATCHED_MARKS_ACTION_ID',                'update_watched_marks');
define ('WAIT_EXT_APP_START_ACTION_ID',                  'wait_ext_app_start');
define ('WAIT_FOR_IP_ADDRESS_ACTION_ID',                 'wait_for_ip_address');
define ('WGET_ACTION_ID',                                'wget');

class AddMenuItemsActionData
{
    const /* (char *)                         */ menu_id                          = 'menu_id';
    const /* (MY_Properties *)                */ menu_params                      = 'menu_params';
    const /* (GuiMenuItemDefList *)           */ menu_items                       = 'menu_items';
    const /* int                              */ sel_ndx                          = 'sel_ndx';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class AddToFavoritesActionData
{
    const /* (char *)                         */ media_url                        = 'media_url';
    const /* (char *)                         */ caption                          = 'caption';
    const /* (char *)                         */ icon_url                         = 'icon_url';
    const /* int                              */ icon_width                       = 'icon_width';
    const /* int                              */ icon_height                      = 'icon_height';
    const /* (char *)                         */ badge_url                        = 'badge_url';
    const /* bool                             */ skip_interactions                = 'skip_interactions';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class BlurayPlayActionData
{
    const /* (char *)                         */ url                              = 'url';
}

class BtCommandActionData
{
    const /* (char *)                         */ name                             = 'name';
    const /* (MY_Properties *)                */ params                           = 'params';
    const /* (GuiAction *)                    */ callback_action                  = 'callback_action';
}

class ChangeBehaviourActionData
{
    const /* (GuiActionMap *)                 */ actions                          = 'actions';
    const /* (GuiTimerDef *)                  */ timer                            = 'timer';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class ChangeGCompDef
{
    const /* (char *)                         */ id                               = 'id';
    const /* bool                             */ remove                           = 'remove';
    const /* (GCompGeometryDef *)             */ geom_def                         = 'geom_def';
    const /* (MY_Properties *)                */ props                            = 'props';
    const /* (GCompViewPositionDef *)         */ view_position                    = 'view_position';
    const /* (MY_Properties *)                */ custom_props                     = 'custom_props';
    const /* bool                             */ selected                         = 'selected';
    const /* (GComponentDefList *)            */ children                         = 'children';
    const /* bool                             */ children_merge_mode              = 'children_merge_mode';
    const /* (char *)                         */ children_insert_after_id         = 'children_insert_after_id';
    const /* GCompTransition                  */ transition                       = 'transition';
}

class ChangeGCompWindowDef
{
    const /* (char *)                         */ background_color                 = 'background_color';
    const /* (char *)                         */ background_url                   = 'background_url';
}

class ChangeGCompsActionData
{
    const /* (ChangeGCompDefList *)           */ change_defs                      = 'change_defs';
    const /* (ChangeGCompWindowDef *)         */ window_change                    = 'window_change';
    const /* bool                             */ interrupt_disabled               = 'interrupt_disabled';
    const /* int                              */ num_steps                        = 'num_steps';
    const /* GCompsFlipEffect                 */ flip_effect                      = 'flip_effect';
    const /* double                           */ duration_multiplier              = 'duration_multiplier';
    const /* (char *)                         */ small_state_text                 = 'small_state_text';
    const /* (char *)                         */ sel_state                        = 'sel_state';
    const /* (GCompUiStateDef *)              */ ui_state                         = 'ui_state';
    const /* bool                             */ skip_repaint                     = 'skip_repaint';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class ChangeParentalCodeActionData
{
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class ChangeSettingsActionData
{
    const /* (MY_Properties *)                */ settings                         = 'settings';
    const /* MY_Bool                          */ reboot                           = 'reboot';
    const /* MY_Bool                          */ restart_gui                      = 'restart_gui';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class CheckRestrictedActionData
{
    const /* (char *)                         */ id                               = 'id';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class CheckSystemStorageActionData
{
    const /* int                              */ required_space                   = 'required_space';
    const /* int                              */ recommended_space                = 'recommended_space';
    const /* (char *)                         */ title                            = 'title';
    const /* (MY_StringArray *)               */ messages                         = 'messages';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class ClearWatchHistoryActionData
{
    const /* (MY_StringArray *)               */ item_ids                         = 'item_ids';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class CloseAndRunActionData
{
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class CloseDialogAndRunActionData
{
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class CompositeActionData
{
    const /* (GuiActionList *)                */ actions                          = 'actions';
}

class ConfirmLocationActionData
{
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class DetectSeriesActionData
{
    const /* (char *)                         */ base_path                        = 'base_path';
    const /* (MY_StringArray *)               */ rel_paths                        = 'rel_paths';
    const /* (char *)                         */ result_path                      = 'result_path';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class DownloadAndInstallApkActionData
{
    const /* (char *)                         */ caption                          = 'caption';
    const /* (char *)                         */ package                          = 'package';
    const /* bool                             */ from_market                      = 'from_market';
    const /* (MY_StringArray *)               */ urls                             = 'urls';
    const /* bool                             */ indirect                         = 'indirect';
    const /* (MY_StringArray *)               */ intro_dialog_urls                = 'intro_dialog_urls';
    const /* (char *)                         */ username                         = 'username';
    const /* (char *)                         */ password                         = 'password';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class DvbCommandActionData
{
    const /* (char *)                         */ name                             = 'name';
    const /* (MY_Properties *)                */ params                           = 'params';
    const /* (GuiAction *)                    */ callback_action                  = 'callback_action';
}

class DvdPlayActionData
{
    const /* (char *)                         */ url                              = 'url';
}

class EditListConfigActionData
{
    const /* (char *)                         */ config_id                        = 'config_id';
    const /* (char *)                         */ title                            = 'title';
    const /* (GuiItemList *)                  */ all_items                        = 'all_items';
    const /* (MY_StringArray *)               */ checked_ids                      = 'checked_ids';
    const /* (GuiItemList *)                  */ groups                           = 'groups';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class EditMainScreenActionData
{
    const /* int                              */ change_op                        = 'change_op';
    const /* (MY_StringArray *)               */ ids                              = 'ids';
    const /* (char *)                         */ caption                          = 'caption';
    const /* (char *)                         */ icon_url                         = 'icon_url';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class FileMovieInfo
{
    const /* (char *)                         */ movie_id                         = 'movie_id';
    const /* (char *)                         */ title                            = 'title';
    const /* (char *)                         */ icon_url                         = 'icon_url';
    const /* int                              */ s                                = 's';
    const /* int                              */ e                                = 'e';
}

class FilePlayActionData
{
    const /* (char *)                         */ url                              = 'url';
    const /* (char *)                         */ caption                          = 'caption';
}

class GCompAlignDef
{
    const /* int                              */ x                                = 'x';
    const /* int                              */ y                                = 'y';
    const /* bool                             */ use_base_width                   = 'use_base_width';
    const /* bool                             */ use_base_height                  = 'use_base_height';
    const /* MY_HAlign                        */ halign                           = 'halign';
    const /* MY_VAlign                        */ valign                           = 'valign';
    const /* MY_HAlign                        */ base_halign                      = 'base_halign';
    const /* MY_VAlign                        */ base_valign                      = 'base_valign';
    const /* bool                             */ base_to_prev                     = 'base_to_prev';
    const /* (char *)                         */ base_id                          = 'base_id';
}

class GCompButtonDef
{
    const /* (char *)                         */ caption                          = 'caption';
    const /* bool                             */ caption_centered                 = 'caption_centered';
    const /* bool                             */ selected                         = 'selected';
}

class GCompCutImageDef
{
    const /* (char *)                         */ url                              = 'url';
    const /* int                              */ alpha                            = 'alpha';
}

class GCompFocusDef
{
    const /* GCompFocusType                   */ type                             = 'type';
    const /* GCompFocusType                   */ type2                            = 'type2';
}

class GCompFocusableDef
{
    const /* (GCompMarginsDef *)              */ sel_margins                      = 'sel_margins';
    const /* (char *)                         */ background_color                 = 'background_color';
    const /* (char *)                         */ background_url                   = 'background_url';
}

class GCompGeometryDef
{
    const /* GCompLayoutRole                  */ role                             = 'role';
    const /* int                              */ w                                = 'w';
    const /* int                              */ h                                = 'h';
    const /* (GCompAlignDef *)                */ align_def                        = 'align_def';
}

class GCompImageDef
{
    const /* (char *)                         */ url                              = 'url';
    const /* int                              */ alpha                            = 'alpha';
    const /* int                              */ mix_alpha                        = 'mix_alpha';
    const /* (char *)                         */ mix_color                        = 'mix_color';
    const /* bool                             */ keep_aspect_ratio                = 'keep_aspect_ratio';
    const /* bool                             */ upscale_enabled                  = 'upscale_enabled';
    const /* (char *)                         */ not_loaded_url                   = 'not_loaded_url';
    const /* (char *)                         */ load_failed_url                  = 'load_failed_url';
    const /* (char *)                         */ low_quality_url                  = 'low_quality_url';
}

class GCompItemDef
{
    const /* GCompItemType                    */ type                             = 'type';
    const /* (char *)                         */ id                               = 'id';
    const /* (char *)                         */ left_caption                     = 'left_caption';
    const /* (char *)                         */ caption                          = 'caption';
    const /* (char *)                         */ icon_url                         = 'icon_url';
}

class GCompLabelDef
{
    const /* (char *)                         */ text                             = 'text';
    const /* MY_FontSize                      */ font_size                        = 'font_size';
    const /* (char *)                         */ text_color                       = 'text_color';
    const /* int                              */ max_num_lines                    = 'max_num_lines';
    const /* bool                             */ draw_halo                        = 'draw_halo';
}

class GCompMarginsDef
{
    const /* int                              */ left                             = 'left';
    const /* int                              */ top                              = 'top';
    const /* int                              */ right                            = 'right';
    const /* int                              */ bottom                           = 'bottom';
}

class GCompPanelDef
{
    const /* (GComponentDefList *)            */ children                         = 'children';
    const /* int                              */ alpha                            = 'alpha';
    const /* int                              */ mix_alpha                        = 'mix_alpha';
    const /* (char *)                         */ mix_color                        = 'mix_color';
    const /* (GCompPrepaintParams *)          */ prepaint_params                  = 'prepaint_params';
}

class GCompPrepaintPaneDef
{
    const /* (GCompPanelDef *)                */ panel                            = 'panel';
    const /* int                              */ native_width                     = 'native_width';
    const /* int                              */ native_height                    = 'native_height';
}

class GCompPrepaintParams
{
    const /* int                              */ width                            = 'width';
    const /* int                              */ height                           = 'height';
}

class GCompRectDef
{
    const /* (char *)                         */ color                            = 'color';
}

class GCompScrollPaneDef
{
    const /* (GCompPanelDef *)                */ panel                            = 'panel';
    const /* (GCompViewPositionDef *)         */ view_position                    = 'view_position';
    const /* bool                             */ view_use_base_width              = 'view_use_base_width';
    const /* bool                             */ view_use_base_height             = 'view_use_base_height';
    const /* int                              */ view_width                       = 'view_width';
    const /* int                              */ view_height                      = 'view_height';
}

class GCompScrollbarDef
{
    const /* (char *)                         */ scroll_pane_id                   = 'scroll_pane_id';
    const /* bool                             */ vertical                         = 'vertical';
}

class GCompTextFieldDef
{
    const /* (GuiTextFieldDef *)              */ def                              = 'def';
    const /* (MY_Properties *)                */ params                           = 'params';
}

class GCompTtfLabelDef
{
    const /* (char *)                         */ text                             = 'text';
    const /* int                              */ font_size                        = 'font_size';
    const /* (char *)                         */ font_face                        = 'font_face';
    const /* (char *)                         */ text_color                       = 'text_color';
    const /* int                              */ max_num_lines                    = 'max_num_lines';
    const /* int                              */ line_spacing                     = 'line_spacing';
    const /* MY_HAlign                        */ halign                           = 'halign';
    const /* MY_VAlign                        */ valign                           = 'valign';
    const /* int                              */ base_font_size                   = 'base_font_size';
    const /* int                              */ min_font_size                    = 'min_font_size';
    const /* GCompTextFit                     */ fit                              = 'fit';
}

class GCompUiStateDef
{
    const /* (char *)                         */ title                            = 'title';
    const /* (GCompItemDefList *)             */ items                            = 'items';
    const /* (char *)                         */ bg_url                           = 'bg_url';
    const /* (char *)                         */ poster_url                       = 'poster_url';
    const /* (MY_Properties *)                */ view_params                      = 'view_params';
}

class GCompVariantDef
{
    const /* (char *)                         */ ref_id                           = 'ref_id';
    const /* (GCompGeometryDef *)             */ geom_def                         = 'geom_def';
    const /* (MY_Properties *)                */ props                            = 'props';
    const /* int                              */ transition_modifier              = 'transition_modifier';
}

class GCompViewPositionDef
{
    const /* (char *)                         */ id                               = 'id';
    const /* int                              */ x                                = 'x';
    const /* int                              */ y                                = 'y';
    const /* float                            */ freedom_factor                   = 'freedom_factor';
    const /* float                            */ gravity                          = 'gravity';
    const /* int                              */ end_min_offset                   = 'end_min_offset';
    const /* (char *)                         */ outside_id                       = 'outside_id';
}

class GCompWindowDef
{
    const /* (char *)                         */ background_color                 = 'background_color';
    const /* (char *)                         */ background_url                   = 'background_url';
    const /* (ImageFitDef *)                  */ background_fit_def               = 'background_fit_def';
    const /* bool                             */ async_loading_background         = 'async_loading_background';
    const /* (char *)                         */ not_loaded_background_url        = 'not_loaded_background_url';
    const /* int                              */ playback_bg_alpha                = 'playback_bg_alpha';
    const /* (char *)                         */ small_state_text                 = 'small_state_text';
    const /* bool                             */ opaque_background                = 'opaque_background';
    const /* (GComponentDefList *)            */ comp_defs                        = 'comp_defs';
    const /* (GCompFocusDef *)                */ focus                            = 'focus';
    const /* (GComponentDef *)                */ bg_def                           = 'bg_def';
    const /* (GCompUiStateDef *)              */ ui_state                         = 'ui_state';
}

class GComponentDef
{
    const /* (char *)                         */ id                               = 'id';
    const /* (GCompGeometryDef *)             */ geom_def                         = 'geom_def';
    const /* (GCompMarginsDef *)              */ margins_def                      = 'margins_def';
    const /* (GCompFocusableDef *)            */ focusable_def                    = 'focusable_def';
    const /* (GCompVariantDef *)              */ focused_variant_def              = 'focused_variant_def';
    const /* (GCompVariantDefList *)          */ extra_variant_defs               = 'extra_variant_defs';
    const /* int                              */ options                          = 'options';
    const /* GComponentKind                   */ kind                             = 'kind';
    const /* (void *)                         */ specific_def                     = 'specific_def';
}

class GuiAction
{
    const /* (char *)                         */ handler_string_id                = 'handler_string_id';
    const /* (void *)                         */ data                             = 'data';
    const /* (char *)                         */ caption                          = 'caption';
    const /* (char *)                         */ plugin_name                      = 'plugin_name';
    const /* (MY_Properties *)                */ params                           = 'params';
    const /* int                              */ flags                            = 'flags';
}

class GuiButtonDef
{
    const /* (char *)                         */ caption                          = 'caption';
    const /* int                              */ width                            = 'width';
    const /* (GuiAction *)                    */ push_action                      = 'push_action';
}

class GuiComboboxDef
{
    const /* (char *)                         */ initial_value                    = 'initial_value';
    const /* (MY_Properties *)                */ value_caption_pairs              = 'value_caption_pairs';
    const /* int                              */ width                            = 'width';
    const /* (GuiAction *)                    */ apply_action                     = 'apply_action';
    const /* (GuiAction *)                    */ confirm_action                   = 'confirm_action';
}

class GuiControlDef
{
    const /* (char *)                         */ name                             = 'name';
    const /* (char *)                         */ title                            = 'title';
    const /* MY_Bool                          */ use_preferred_width              = 'use_preferred_width';
    const /* GuiControlKind                   */ kind                             = 'kind';
    const /* (void *)                         */ specific_def                     = 'specific_def';
    const /* (MY_Properties *)                */ params                           = 'params';
}

class GuiExtraChoice
{
    const /* (char *)                         */ caption                          = 'caption';
}

class GuiItem
{
    const /* (char *)                         */ id                               = 'id';
    const /* (char *)                         */ caption                          = 'caption';
    const /* (char *)                         */ icon_url                         = 'icon_url';
    const /* (char *)                         */ group_id                         = 'group_id';
}

class GuiLabelDef
{
    const /* (char *)                         */ caption                          = 'caption';
}

class GuiMenuItemDef
{
    const /* MY_Bool                          */ is_separator                     = 'is_separator';
    const /* (char *)                         */ id                               = 'id';
    const /* (char *)                         */ caption                          = 'caption';
    const /* (char *)                         */ icon_url                         = 'icon_url';
    const /* bool                             */ marked                           = 'marked';
    const /* (GuiAction *)                    */ action                           = 'action';
    const /* (GuiAction *)                    */ is_shown_action                  = 'is_shown_action';
}

class GuiProgressBarDef
{
    const /* double                           */ progress                         = 'progress';
    const /* int                              */ width                            = 'width';
}

class GuiTextFieldDef
{
    const /* (char *)                         */ initial_value                    = 'initial_value';
    const /* MY_Bool                          */ numeric                          = 'numeric';
    const /* MY_Bool                          */ prefer_numbers                   = 'prefer_numbers';
    const /* MY_Bool                          */ password                         = 'password';
    const /* MY_Bool                          */ has_osk                          = 'has_osk';
    const /* MY_Bool                          */ always_active                    = 'always_active';
    const /* int                              */ width                            = 'width';
    const /* (GuiAction *)                    */ apply_action                     = 'apply_action';
    const /* (GuiAction *)                    */ confirm_action                   = 'confirm_action';
}

class GuiTimerDef
{
    const /* int                              */ delay_ms                         = 'delay_ms';
    const /* bool                             */ reset_on_keypress                = 'reset_on_keypress';
    const /* bool                             */ clear_on_keypress                = 'clear_on_keypress';
    const /* int                              */ num_repeats                      = 'num_repeats';
    const /* bool                             */ early_start                      = 'early_start';
}

class GuiVGapDef
{
    const /* int                              */ vgap                             = 'vgap';
}

class ImageFitDef
{
    const /* double                           */ base_halign_ratio                = 'base_halign_ratio';
    const /* double                           */ base_valign_ratio                = 'base_valign_ratio';
}

class InitPersistfsActionData
{
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class InvalidateFilesAssociationsActionData
{
    const /* bool                             */ all                              = 'all';
    const /* (MY_StringArray *)               */ hashes                           = 'hashes';
    const /* (MY_StringArray *)               */ paths                            = 'paths';
    const /* (char *)                         */ folder_url                       = 'folder_url';
    const /* (char *)                         */ base_dir_path                    = 'base_dir_path';
    const /* (char *)                         */ base_cache_dpath                 = 'base_cache_dpath';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class LaunchExtAppActionData
{
    const /* (char *)                         */ cmd                              = 'cmd';
    const /* bool                             */ ensure_playback_stopped          = 'ensure_playback_stopped';
    const /* int                              */ delay                            = 'delay';
    const /* (char *)                         */ package                          = 'package';
    const /* (char *)                         */ version                          = 'version';
    const /* (char *)                         */ msg_toast                        = 'msg_toast';
    const /* (MY_Properties *)                */ params                           = 'params';
    const /* (GuiAction *)                    */ error_action                     = 'error_action';
}

class LaunchMediaUrlActionData
{
    const /* (char *)                         */ url                              = 'url';
    const /* (char *)                         */ caption                          = 'caption';
    const /* bool                             */ play_in_background               = 'play_in_background';
    const /* int                              */ start_index                      = 'start_index';
    const /* bool                             */ internal_player_only             = 'internal_player_only';
    const /* (GuiExtraChoiceList *)           */ resume_extra_choices             = 'resume_extra_choices';
    const /* (char *)                         */ resume_ext_text                  = 'resume_ext_text';
    const /* (MY_Properties *)                */ params                           = 'params';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class OpenFolderActionData
{
    const /* (char *)                         */ media_url                        = 'media_url';
}

class PlaylistPlayActionData
{
    const /* (char *)                         */ url                              = 'url';
    const /* int                              */ start_index                      = 'start_index';
}

class PluginArchiveDef
{
    const /* (char *)                         */ id                               = 'id';
    const /* (MY_Properties *)                */ urls_with_keys                   = 'urls_with_keys';
    const /* (char *)                         */ all_tgz_url                      = 'all_tgz_url';
    const /* long long                        */ total_size                       = 'total_size';
}

class PluginClearArchiveCacheActionData
{
    const /* (char *)                         */ archive_id                       = 'archive_id';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class PluginControlsFolderView
{
    const /* (GuiControlDefList *)            */ defs                             = 'defs';
    const /* (GuiActionMap *)                 */ actions                          = 'actions';
    const /* (GuiTimerDef *)                  */ timer                            = 'timer';
    const /* int                              */ initial_sel_ndx                  = 'initial_sel_ndx';
    const /* (PluginFolderViewParams *)       */ params                           = 'params';
}

class PluginFolderView
{
    const /* PluginFolderViewKind             */ view_kind                        = 'view_kind';
    const /* (void *)                         */ data                             = 'data';
    const /* MY_Bool                          */ multiple_views_supported         = 'multiple_views_supported';
    const /* (PluginArchiveDef *)             */ archive                          = 'archive';
    const /* (char *)                         */ folder_type                      = 'folder_type';
    const /* (MY_Properties *)                */ params                           = 'params';
}

class PluginFolderViewInputData
{
    const /* (char *)                         */ media_url                        = 'media_url';
    const /* (char *)                         */ sel_state                        = 'sel_state';
}

class PluginFolderViewParams
{
    const /* MY_Bool                          */ paint_path_box                   = 'paint_path_box';
    const /* MY_Bool                          */ paint_path_box_background        = 'paint_path_box_background';
    const /* MY_Bool                          */ paint_content_box_background     = 'paint_content_box_background';
    const /* (char *)                         */ background_url                   = 'background_url';
    const /* bool                             */ popup_dialogs_enabled            = 'popup_dialogs_enabled';
}

class PluginGCompsFolderView
{
    const /* (GCompWindowDef *)               */ window_def                       = 'window_def';
    const /* (char *)                         */ sel_state                        = 'sel_state';
    const /* (GuiActionMap *)                 */ actions                          = 'actions';
    const /* (GuiTimerDef *)                  */ timer                            = 'timer';
}

class PluginGCompsRow
{
    const /* (GComponentDefList *)            */ defs                             = 'defs';
    const /* int                              */ width                            = 'width';
    const /* int                              */ options                          = 'options';
    const /* (GCompUiStateDef *)              */ ui_state                         = 'ui_state';
}

class PluginHandleUserInputActionData
{
    const /* int                              */ operation_timeout                = 'operation_timeout';
    const /* int                              */ show_dialog_delay                = 'show_dialog_delay';
    const /* (char *)                         */ dialog_title                     = 'dialog_title';
}

class PluginInvalidateFoldersActionData
{
    const /* (MY_StringArray *)               */ media_urls                       = 'media_urls';
    const /* bool                             */ all_except                       = 'all_except';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class PluginMargins
{
    const /* int                              */ left                             = 'left';
    const /* int                              */ top                              = 'top';
    const /* int                              */ right                            = 'right';
    const /* int                              */ bottom                           = 'bottom';
}

class PluginMovie
{
    const /* (char *)                         */ name                             = 'name';
    const /* (char *)                         */ name_original                    = 'name_original';
    const /* (char *)                         */ description                      = 'description';
    const /* (char *)                         */ poster_url                       = 'poster_url';
    const /* int                              */ length_min                       = 'length_min';
    const /* int                              */ year                             = 'year';
    const /* (char *)                         */ directors_str                    = 'directors_str';
    const /* (char *)                         */ scenarios_str                    = 'scenarios_str';
    const /* (char *)                         */ actors_str                       = 'actors_str';
    const /* (char *)                         */ genres_str                       = 'genres_str';
    const /* (char *)                         */ rate_imdb                        = 'rate_imdb';
    const /* (char *)                         */ rate_kinopoisk                   = 'rate_kinopoisk';
    const /* (char *)                         */ rate_mpaa                        = 'rate_mpaa';
    const /* (char *)                         */ country                          = 'country';
    const /* (char *)                         */ budget                           = 'budget';
    const /* (MY_Properties *)                */ details                          = 'details';
    const /* (MY_Properties *)                */ rate_details                     = 'rate_details';
}

class PluginMovieFolderView
{
    const /* (PluginMovie *)                  */ movie                            = 'movie';
    const /* (char *)                         */ left_button_caption              = 'left_button_caption';
    const /* (GuiAction *)                    */ left_button_action               = 'left_button_action';
    const /* MY_Bool                          */ has_right_button                 = 'has_right_button';
    const /* (char *)                         */ right_button_caption             = 'right_button_caption';
    const /* (GuiAction *)                    */ right_button_action              = 'right_button_action';
    const /* MY_Bool                          */ has_multiple_series              = 'has_multiple_series';
    const /* (char *)                         */ series_media_url                 = 'series_media_url';
    const /* MY_VAlign                        */ poster_valign                    = 'poster_valign';
    const /* (PluginFolderViewParams *)       */ params                           = 'params';
}

class PluginOpenFolderActionData
{
    const /* (char *)                         */ caption                          = 'caption';
    const /* (char *)                         */ media_url                        = 'media_url';
    const /* (char *)                         */ id                               = 'id';
    const /* (char *)                         */ sel_id                           = 'sel_id';
    const /* (MY_StringArray *)               */ tags                             = 'tags';
    const /* bool                             */ keep_osd_context                 = 'keep_osd_context';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class PluginOsdComponent
{
    const /* int                              */ x                                = 'x';
    const /* int                              */ y                                = 'y';
    const /* (char *)                         */ image_url                        = 'image_url';
    const /* int                              */ image_width                      = 'image_width';
    const /* int                              */ image_height                     = 'image_height';
    const /* (char *)                         */ text                             = 'text';
    const /* PluginFontSize                   */ text_font_size                   = 'text_font_size';
    const /* (char *)                         */ text_color                       = 'text_color';
    const /* bool                             */ text_halo                        = 'text_halo';
}

class PluginOutputData
{
    const /* MY_Bool                          */ has_data                         = 'has_data';
    const /* PluginOutputDataType             */ data_type                        = 'data_type';
    const /* (void *)                         */ data                             = 'data';
    const /* (MY_Properties *)                */ plugin_cookies                   = 'plugin_cookies';
    const /* MY_Bool                          */ is_error                         = 'is_error';
    const /* (GuiAction *)                    */ error_action                     = 'error_action';
}

class PluginPathElement
{
    const /* (char *)                         */ media_url                        = 'media_url';
    const /* (char *)                         */ id                               = 'id';
    const /* (char *)                         */ caption                          = 'caption';
}

class PluginRefreshEntryPointsActionData
{
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class PluginRegularFolderItem
{
    const /* (char *)                         */ media_url                        = 'media_url';
    const /* (char *)                         */ caption                          = 'caption';
    const /* bool                             */ starred                          = 'starred';
    const /* bool                             */ locked                           = 'locked';
    const /* (ViewItemParams *)               */ view_item_params                 = 'view_item_params';
}

class PluginRegularFolderRange
{
    const /* int                              */ total                            = 'total';
    const /* MY_Bool                          */ more_items_available             = 'more_items_available';
    const /* int                              */ from_ndx                         = 'from_ndx';
    const /* int                              */ count                            = 'count';
    const /* (PluginRegularFolderItemList *)  */ items                            = 'items';
}

class PluginRegularFolderView
{
    const /* (ViewParams *)                   */ view_params                      = 'view_params';
    const /* (ViewItemParams *)               */ base_view_item_params            = 'base_view_item_params';
    const /* (ViewItemParams *)               */ not_loaded_view_item_params      = 'not_loaded_view_item_params';
    const /* (ViewItemParams *)               */ load_failed_view_item_params     = 'load_failed_view_item_params';
    const /* (GuiActionMap *)                 */ actions                          = 'actions';
    const /* (GuiTimerDef *)                  */ timer                            = 'timer';
    const /* MY_Bool                          */ async_icon_loading               = 'async_icon_loading';
    const /* MY_Bool                          */ async_icon_loading_pipelining    = 'async_icon_loading_pipelining';
    const /* int                              */ async_icon_loading_max_connects  = 'async_icon_loading_max_connects';
    const /* MY_Bool                          */ async_icon_loading_interrupt_enabled = 'async_icon_loading_interrupt_enabled';
    const /* (PluginRegularFolderRange *)     */ initial_range                    = 'initial_range';
}

class PluginRegularItem
{
    const /* (char *)                         */ icon_url                         = 'icon_url';
    const /* (MY_StringArray *)               */ sticker_urls                     = 'sticker_urls';
    const /* (PluginRegularStickerList *)     */ stickers                         = 'stickers';
    const /* (char *)                         */ caption                          = 'caption';
    const /* (char *)                         */ id                               = 'id';
    const /* (char *)                         */ params_template_id               = 'params_template_id';
}

class PluginRegularItemParams
{
    const /* (PluginRegularItemVariableParams *) */ def                              = 'def';
    const /* (PluginRegularItemVariableParams *) */ sel                              = 'sel';
    const /* (PluginRegularItemVariableParams *) */ inactive                         = 'inactive';
    const /* (char *)                         */ loading_url                      = 'loading_url';
    const /* (char *)                         */ load_failed_url                  = 'load_failed_url';
    const /* MY_Bool                          */ hide_captions                    = 'hide_captions';
    const /* int                              */ caption_max_num_lines            = 'caption_max_num_lines';
    const /* int                              */ caption_line_spacing             = 'caption_line_spacing';
    const /* int                              */ sticker_text_size                = 'sticker_text_size';
    const /* (char *)                         */ sticker_text_color               = 'sticker_text_color';
    const /* (PluginMargins *)                */ sel_margins                      = 'sel_margins';
}

class PluginRegularItemVariableParams
{
    const /* int                              */ width                            = 'width';
    const /* int                              */ height                           = 'height';
    const /* int                              */ dx                               = 'dx';
    const /* int                              */ icon_width                       = 'icon_width';
    const /* int                              */ icon_height                      = 'icon_height';
    const /* int                              */ icon_dy                          = 'icon_dy';
    const /* int                              */ caption_dy                       = 'caption_dy';
    const /* (char *)                         */ caption_color                    = 'caption_color';
    const /* int                              */ caption_font_size                = 'caption_font_size';
    const /* int                              */ sticker_width                    = 'sticker_width';
    const /* int                              */ sticker_height                   = 'sticker_height';
}

class PluginRegularRow
{
    const /* bool                             */ hide_captions                    = 'hide_captions';
    const /* bool                             */ hide_icons                       = 'hide_icons';
    const /* int                              */ left_padding                     = 'left_padding';
    const /* int                              */ inactive_left_padding            = 'inactive_left_padding';
    const /* int                              */ right_padding                    = 'right_padding';
    const /* int                              */ width                            = 'width';
    const /* bool                             */ fade_enabled                     = 'fade_enabled';
    const /* (char *)                         */ fade_icon_mix_color              = 'fade_icon_mix_color';
    const /* int                              */ fade_icon_mix_alpha              = 'fade_icon_mix_alpha';
    const /* int                              */ lite_fade_icon_mix_alpha         = 'lite_fade_icon_mix_alpha';
    const /* (char *)                         */ fade_caption_color               = 'fade_caption_color';
    const /* (char *)                         */ item_params_template_id          = 'item_params_template_id';
    const /* (PluginRegularItemParams *)      */ item_params                      = 'item_params';
    const /* (PluginRegularItemList *)        */ items                            = 'items';
}

class PluginRegularSticker
{
    const /* MY_Rect                          */ r                                = 'r';
    const /* (char *)                         */ icon_url                         = 'icon_url';
    const /* (char *)                         */ text                             = 'text';
    const /* (char *)                         */ color                            = 'color';
}

class PluginReplacePathActionData
{
    const /* int                              */ erase_count                      = 'erase_count';
    const /* (PluginPathElementList *)        */ elements                         = 'elements';
    const /* (char *)                         */ sel_id                           = 'sel_id';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class PluginRow
{
    const /* PluginRowType                    */ type                             = 'type';
    const /* (void *)                         */ data                             = 'data';
    const /* (char *)                         */ id                               = 'id';
    const /* int                              */ ui_level                         = 'ui_level';
    const /* (char *)                         */ group_id                         = 'group_id';
    const /* (char *)                         */ header_id                        = 'header_id';
    const /* (char *)                         */ title                            = 'title';
    const /* MY_Bool                          */ focusable                        = 'focusable';
    const /* int                              */ options                          = 'options';
    const /* int                              */ height                           = 'height';
    const /* int                              */ inactive_height                  = 'inactive_height';
    const /* (GuiAction *)                    */ show_all_action                  = 'show_all_action';
}

class PluginRowsFolderView
{
    const /* (PluginRowsPane *)               */ pane                             = 'pane';
    const /* (char *)                         */ sel_state                        = 'sel_state';
    const /* (GuiActionMap *)                 */ actions                          = 'actions';
    const /* (GuiTimerDef *)                  */ timer                            = 'timer';
}

class PluginRowsHeader
{
    const /* (char *)                         */ id                               = 'id';
    const /* (char *)                         */ title                            = 'title';
    const /* bool                             */ first_in_cluster                 = 'first_in_cluster';
}

class PluginRowsInfo
{
    const /* (char *)                         */ folder_key                       = 'folder_key';
    const /* (char *)                         */ item_id                          = 'item_id';
    const /* (GComponentDefList *)            */ info_defs                        = 'info_defs';
    const /* (char *)                         */ bg_url                           = 'bg_url';
    const /* (char *)                         */ nl_bg_url                        = 'nl_bg_url';
    const /* (char *)                         */ mask_url                         = 'mask_url';
    const /* bool                             */ bg_poster_mode                   = 'bg_poster_mode';
    const /* (MY_StringArray *)               */ playback_urls                    = 'playback_urls';
}

class PluginRowsPane
{
    const /* (PluginRowList *)                */ rows                             = 'rows';
    const /* (PluginRowsHeaderList *)         */ headers                          = 'headers';
    const /* (GCompFocusDef *)                */ focus                            = 'focus';
    const /* (GComponentDef *)                */ bg                               = 'bg';
    const /* MY_Rect                          */ screen_r                         = 'screen_r';
    const /* int                              */ screen_y2                        = 'screen_y2';
    const /* int                              */ min_row_index_for_y2             = 'min_row_index_for_y2';
    const /* MY_Rect                          */ info_r                           = 'info_r';
    const /* MY_Rect                          */ vod_r                            = 'vod_r';
    const /* bool                             */ header_enabled                   = 'header_enabled';
    const /* bool                             */ single_list_navigation           = 'single_list_navigation';
    const /* MY_Bool                          */ initial_focus_header             = 'initial_focus_header';
    const /* (char *)                         */ initial_focus_header_id          = 'initial_focus_header_id';
    const /* (char *)                         */ initial_focus_item_id            = 'initial_focus_item_id';
    const /* (char *)                         */ initial_focus_row_id             = 'initial_focus_row_id';
    const /* float                            */ horizontal_focus_freedom_factor  = 'horizontal_focus_freedom_factor';
    const /* int                              */ horizontal_focus_end_min_offset  = 'horizontal_focus_end_min_offset';
    const /* float                            */ vertical_focus_freedom_factor    = 'vertical_focus_freedom_factor';
    const /* float                            */ vertical_focus_gravity           = 'vertical_focus_gravity';
    const /* int                              */ vertical_focus_end_min_offset    = 'vertical_focus_end_min_offset';
    const /* int                              */ header_font_size                 = 'header_font_size';
    const /* int                              */ header_min_font_size             = 'header_min_font_size';
    const /* int                              */ max_header_width                 = 'max_header_width';
    const /* int                              */ min_header_width                 = 'min_header_width';
    const /* int                              */ up_arrow_dy                      = 'up_arrow_dy';
    const /* (PluginRegularItemParamsMap *)   */ regular_item_params_templates    = 'regular_item_params_templates';
}

class PluginShowErrorActionData
{
    const /* MY_Bool                          */ fatal                            = 'fatal';
    const /* (char *)                         */ title                            = 'title';
    const /* (MY_StringArray *)               */ msg_lines                        = 'msg_lines';
    const /* MY_Bool                          */ stop_playback                    = 'stop_playback';
    const /* int                              */ retry_delay_ms                   = 'retry_delay_ms';
    const /* (MY_Properties *)                */ options                          = 'options';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class PluginSystemActionData
{
    const /* (char *)                         */ run_string                       = 'run_string';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class PluginTitleRow
{
    const /* (char *)                         */ caption                          = 'caption';
    const /* (char *)                         */ color                            = 'color';
    const /* int                              */ font_size                        = 'font_size';
    const /* int                              */ left                             = 'left';
    const /* int                              */ dy                               = 'dy';
    const /* int                              */ active_dy                        = 'active_dy';
    const /* int                              */ width                            = 'width';
    const /* bool                             */ fade_enabled                     = 'fade_enabled';
    const /* (char *)                         */ fade_color                       = 'fade_color';
    const /* (char *)                         */ lite_fade_color                  = 'lite_fade_color';
}

class PluginTvChannel
{
    const /* (char *)                         */ id                               = 'id';
    const /* (char *)                         */ caption                          = 'caption';
    const /* (char *)                         */ extra_caption                    = 'extra_caption';
    const /* (MY_StringArray *)               */ group_ids                        = 'group_ids';
    const /* (char *)                         */ icon_url                         = 'icon_url';
    const /* int                              */ number                           = 'number';
    const /* MY_Bool                          */ have_archive                     = 'have_archive';
    const /* MY_Bool                          */ is_protected                     = 'is_protected';
    const /* MY_Bool                          */ recording_enabled                = 'recording_enabled';
    const /* bool                             */ ext_epg_enabled                  = 'ext_epg_enabled';
    const /* bool                             */ vod_archive_enabled              = 'vod_archive_enabled';
    const /* MY_Bool                          */ start_over_enabled               = 'start_over_enabled';
    const /* MY_Bool                          */ trick_play_enabled               = 'trick_play_enabled';
    const /* int                              */ buffering_ms                     = 'buffering_ms';
    const /* int                              */ timeshift_hours                  = 'timeshift_hours';
    const /* PluginEpgMode                    */ epg_mode                         = 'epg_mode';
    const /* int                              */ past_epg_days                    = 'past_epg_days';
    const /* int                              */ future_epg_days                  = 'future_epg_days';
    const /* (char *)                         */ ext_epg_id                       = 'ext_epg_id';
    const /* (char *)                         */ ext_epg_icon_url                 = 'ext_epg_icon_url';
    const /* int                              */ epg_icon_width                   = 'epg_icon_width';
    const /* int                              */ epg_icon_height                  = 'epg_icon_height';
    const /* int                              */ epg_icon_x_offset                = 'epg_icon_x_offset';
    const /* int                              */ epg_icon_y_offset                = 'epg_icon_y_offset';
    const /* bool                             */ epg_icon_hide_without_archive    = 'epg_icon_hide_without_archive';
    const /* MY_Bool                          */ use_program_have_archive_flags   = 'use_program_have_archive_flags';
    const /* int                              */ archive_past_sec                 = 'archive_past_sec';
    const /* int                              */ archive_delay_sec                = 'archive_delay_sec';
    const /* MY_Bool                          */ playback_url_is_stream_url       = 'playback_url_is_stream_url';
}

class PluginTvEpgProgram
{
    const /* time_t                           */ start_tm_sec                     = 'start_tm_sec';
    const /* time_t                           */ end_tm_sec                       = 'end_tm_sec';
    const /* (char *)                         */ name                             = 'name';
    const /* (char *)                         */ description                      = 'description';
    const /* bool                             */ have_archive                     = 'have_archive';
    const /* int                              */ flags                            = 'flags';
    const /* (char *)                         */ icon_url                         = 'icon_url';
    const /* (char *)                         */ ext_id                           = 'ext_id';
}

class PluginTvGroup
{
    const /* (char *)                         */ id                               = 'id';
    const /* (char *)                         */ caption                          = 'caption';
    const /* (char *)                         */ icon_url                         = 'icon_url';
    const /* (MY_StringArray *)               */ channel_ids                      = 'channel_ids';
}

class PluginTvInfo
{
    const /* time_t                           */ server_time                      = 'server_time';
    const /* (PluginTvGroupList *)            */ groups                           = 'groups';
    const /* (PluginTvChannelList *)          */ channels                         = 'channels';
    const /* (char *)                         */ channels_file                    = 'channels_file';
    const /* MY_Bool                          */ show_group_channels_only         = 'show_group_channels_only';
    const /* MY_Bool                          */ favorites_supported              = 'favorites_supported';
    const /* (MY_StringArray *)               */ favorite_channel_ids             = 'favorite_channel_ids';
    const /* (char *)                         */ favorites_icon_url               = 'favorites_icon_url';
    const /* (char *)                         */ initial_group_id                 = 'initial_group_id';
    const /* (char *)                         */ initial_channel_id               = 'initial_channel_id';
    const /* MY_Bool                          */ initial_is_favorite              = 'initial_is_favorite';
    const /* int                              */ initial_archive_tm               = 'initial_archive_tm';
    const /* MY_Bool                          */ initial_trick_play               = 'initial_trick_play';
    const /* int                              */ initial_trick_play_duration      = 'initial_trick_play_duration';
    const /* (PluginTvEpgProgram *)           */ initial_archive_program          = 'initial_archive_program';
    const /* (GuiActionMap *)                 */ actions                          = 'actions';
    const /* (GuiTimerDef *)                  */ timer                            = 'timer';
    const /* MY_Bool                          */ ip_address_required              = 'ip_address_required';
    const /* MY_Bool                          */ valid_time_required              = 'valid_time_required';
    const /* bool                             */ ext_epg_enabled                  = 'ext_epg_enabled';
    const /* PluginEpgMode                    */ epg_mode                         = 'epg_mode';
    const /* int                              */ epg_ttl_sec                      = 'epg_ttl_sec';
    const /* PluginFontSize                   */ epg_font_size                    = 'epg_font_size';
    const /* int                              */ groups_text_size                 = 'groups_text_size';
    const /* int                              */ groups_page_size                 = 'groups_page_size';
    const /* int                              */ channels_text_size               = 'channels_text_size';
    const /* int                              */ channels_page_size               = 'channels_page_size';
    const /* int                              */ epg_text_size                    = 'epg_text_size';
    const /* int                              */ epg_page_size                    = 'epg_page_size';
    const /* UseTz                            */ epg_day_use_local_tz             = 'epg_day_use_local_tz';
    const /* int                              */ epg_day_shift_sec                = 'epg_day_shift_sec';
    const /* (char *)                         */ ext_epg_base_url                 = 'ext_epg_base_url';
    const /* (char *)                         */ ext_epg_channel_ids_url          = 'ext_epg_channel_ids_url';
    const /* MY_Bool                          */ custom_protect_code_handling     = 'custom_protect_code_handling';
    const /* MY_Bool                          */ builtin_pcontrol_enabled         = 'builtin_pcontrol_enabled';
    const /* (char *)                         */ entered_pcode                    = 'entered_pcode';
    const /* MY_Bool                          */ subtitles_osd_enabled            = 'subtitles_osd_enabled';
    const /* MY_Bool                          */ keep_playing_on_reload           = 'keep_playing_on_reload';
    const /* MY_Bool                          */ keep_playing_on_reenter          = 'keep_playing_on_reenter';
    const /* bool                             */ icon_auto_reducing_disabled      = 'icon_auto_reducing_disabled';
    const /* MY_Bool                          */ disable_connecting_status_osd    = 'disable_connecting_status_osd';
    const /* MY_Bool                          */ show_prev_next_scrolling_hint    = 'show_prev_next_scrolling_hint';
    const /* (PluginArchiveDef *)             */ archive                          = 'archive';
}

class PluginTvPlayActionData
{
    const /* (char *)                         */ initial_group_id                 = 'initial_group_id';
    const /* (char *)                         */ initial_channel_id               = 'initial_channel_id';
    const /* MY_Bool                          */ initial_is_favorite              = 'initial_is_favorite';
    const /* int                              */ initial_archive_tm               = 'initial_archive_tm';
    const /* MY_Bool                          */ initial_trick_play               = 'initial_trick_play';
    const /* int                              */ initial_trick_play_duration      = 'initial_trick_play_duration';
    const /* (PluginTvEpgProgram *)           */ initial_archive_program          = 'initial_archive_program';
}

class PluginTvSelectChannelActionData
{
    const /* (char *)                         */ group_id                         = 'group_id';
    const /* (char *)                         */ channel_id                       = 'channel_id';
    const /* MY_Bool                          */ is_favorite                      = 'is_favorite';
}

class PluginUpdateArchiveCacheActionData
{
    const /* (PluginArchiveDef *)             */ archive                          = 'archive';
    const /* bool                             */ reread_archive_dir               = 'reread_archive_dir';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class PluginUpdateEpfMappingActionData
{
    const /* (char *)                         */ epf_id                           = 'epf_id';
    const /* (char *)                         */ mapped_plugin_name               = 'mapped_plugin_name';
    const /* bool                             */ sync_epfs                        = 'sync_epfs';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class PluginUpdateEpgActionData
{
    const /* (char *)                         */ channel_id                       = 'channel_id';
    const /* bool                             */ clear                            = 'clear';
    const /* time_t                           */ day_start_tm_sec                 = 'day_start_tm_sec';
    const /* (PluginTvEpgProgramList *)       */ programs                         = 'programs';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class PluginUpdateFolderActionData
{
    const /* (PluginRegularFolderRange *)     */ range                            = 'range';
    const /* MY_Bool                          */ need_refresh                     = 'need_refresh';
    const /* int                              */ sel_ndx                          = 'sel_ndx';
}

class PluginUpdateInfoBlockActionData
{
    const /* (char *)                         */ text_above                       = 'text_above';
    const /* (char *)                         */ text_color                       = 'text_color';
    const /* bool                             */ text_halo                        = 'text_halo';
    const /* int                              */ text_y_offset                    = 'text_y_offset';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class PluginUpdateOsdActionData
{
    const /* (PluginOsdComponentList *)       */ components                       = 'components';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class PluginUpdateRowsInfoActionData
{
    const /* bool                             */ clear_cache                      = 'clear_cache';
    const /* bool                             */ invalidate_cache                 = 'invalidate_cache';
    const /* (PluginRowsInfo *)               */ info                             = 'info';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class PluginUpdateRowsMenuActionData
{
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class PluginUpdateStickerActionData
{
    const /* (char *)                         */ sticker                          = 'sticker';
    const /* (char *)                         */ ep_media_url                     = 'ep_media_url';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class PluginVodInfo
{
    const /* (char *)                         */ id                               = 'id';
    const /* (char *)                         */ name                             = 'name';
    const /* (char *)                         */ sub_name                         = 'sub_name';
    const /* (char *)                         */ description                      = 'description';
    const /* (char *)                         */ poster_url                       = 'poster_url';
    const /* (PluginVodSeriesInfoList *)      */ series                           = 'series';
    const /* int                              */ initial_series_ndx               = 'initial_series_ndx';
    const /* int                              */ initial_position_ms              = 'initial_position_ms';
    const /* int                              */ buffering_ms                     = 'buffering_ms';
    const /* MY_Bool                          */ advert_mode                      = 'advert_mode';
    const /* (GuiMenuItemDefList *)           */ extra_menu_items                 = 'extra_menu_items';
    const /* (GuiAction *)                    */ enter_menu_action                = 'enter_menu_action';
    const /* (GuiActionMap *)                 */ actions                          = 'actions';
    const /* (GuiTimerDef *)                  */ timer                            = 'timer';
    const /* MY_Bool                          */ ip_address_required              = 'ip_address_required';
    const /* MY_Bool                          */ valid_time_required              = 'valid_time_required';
    const /* MY_Bool                          */ subtitles_osd_enabled            = 'subtitles_osd_enabled';
    const /* bool                             */ skip_dummy_player_on_error       = 'skip_dummy_player_on_error';
    const /* MY_Bool                          */ keep_playing_on_reload           = 'keep_playing_on_reload';
    const /* MY_Bool                          */ keep_playing_on_reenter          = 'keep_playing_on_reenter';
    const /* (char *)                         */ recent_plugin                    = 'recent_plugin';
    const /* (MY_Properties *)                */ recent_action_params             = 'recent_action_params';
    const /* (char *)                         */ recent_group_by                  = 'recent_group_by';
    const /* (MY_StringArray *)               */ recent_tags                      = 'recent_tags';
    const /* (MY_Properties *)                */ params                           = 'params';
}

class PluginVodPlayActionData
{
    const /* (PluginVodInfo *)                */ vod_info                         = 'vod_info';
}

class PluginVodSeriesInfo
{
    const /* (char *)                         */ name                             = 'name';
    const /* (char *)                         */ playback_url                     = 'playback_url';
    const /* MY_Bool                          */ playback_url_is_stream_url       = 'playback_url_is_stream_url';
    const /* (char *)                         */ content_id                       = 'content_id';
    const /* (char *)                         */ recent_uid                       = 'recent_uid';
    const /* (FileMovieInfo *)                */ mdb_info                         = 'mdb_info';
}

class RemoveFromFavoritesActionData
{
    const /* (char *)                         */ name                             = 'name';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class RenamePathActionData
{
    const /* (char *)                         */ caption                          = 'caption';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class ResetControlsActionData
{
    const /* (GuiControlDefList *)            */ defs                             = 'defs';
    const /* int                              */ initial_sel_ndx                  = 'initial_sel_ndx';
    const /* bool                             */ keep_inner_state                 = 'keep_inner_state';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class RestartActionData
{
    const /* bool                             */ reboot                           = 'reboot';
}

class RunBuiltinActionData
{
    const /* (char *)                         */ builtin_action_id                = 'builtin_action_id';
    const /* (MY_Properties *)                */ params                           = 'params';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
    const /* (GuiAction *)                    */ error_action                     = 'error_action';
}

class RunDefaultActionData
{
    const /* GuiEventKind                     */ event                            = 'event';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class SetRestrictedActionData
{
    const /* (char *)                         */ id                               = 'id';
    const /* bool                             */ restricted                       = 'restricted';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class SetTimeZoneActionData
{
    const /* int                              */ offset_sec                       = 'offset_sec';
    const /* MY_Bool                          */ has_dst                          = 'has_dst';
    const /* (char *)                         */ olson_id                         = 'olson_id';
    const /* (MY_StringArray *)               */ preferred_olson_ids              = 'preferred_olson_ids';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class ShowBlackScreenActionData
{
    const /* (char *)                         */ bg_url                           = 'bg_url';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class ShowDialogActionData
{
    const /* (char *)                         */ title                            = 'title';
    const /* (GuiControlDefList *)            */ defs                             = 'defs';
    const /* (GuiActionMap *)                 */ actions                          = 'actions';
    const /* (GuiTimerDef *)                  */ timer                            = 'timer';
    const /* MY_Bool                          */ close_by_return                  = 'close_by_return';
    const /* int                              */ preferred_width                  = 'preferred_width';
    const /* int                              */ max_height                       = 'max_height';
    const /* int                              */ min_item_title_width             = 'min_item_title_width';
    const /* int                              */ initial_sel_ndx                  = 'initial_sel_ndx';
    const /* (MY_Properties *)                */ params                           = 'params';
}

class ShowGCompsDialogActionData
{
    const /* (GCompGeometryDef *)             */ geom_def                         = 'geom_def';
    const /* (GComponentDefList *)            */ comp_defs                        = 'comp_defs';
    const /* (GCompFocusDef *)                */ focus                            = 'focus';
    const /* (GCompUiStateDef *)              */ ui_state                         = 'ui_state';
    const /* (char *)                         */ sel_state                        = 'sel_state';
    const /* (GuiActionMap *)                 */ actions                          = 'actions';
    const /* (GuiTimerDef *)                  */ timer                            = 'timer';
    const /* (MY_Properties *)                */ params                           = 'params';
}

class ShowMainScreenActionData
{
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class ShowPopupMenuActionData
{
    const /* (GuiMenuItemDefList *)           */ menu_items                       = 'menu_items';
    const /* int                              */ selected_menu_item_index         = 'selected_menu_item_index';
}

class SleepActionData
{
    const /* int                              */ delay_ms                         = 'delay_ms';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class StartServiceActionData
{
    const /* (char *)                         */ class_name                       = 'class_name';
    const /* (char *)                         */ package_name                     = 'package_name';
    const /* (MY_Properties *)                */ params                           = 'params';
    const /* int                              */ delay_ms                         = 'delay_ms';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class StatusActionData
{
    const /* int                              */ status                           = 'status';
}

class StopPlaybackActionData
{
    const /* bool                             */ wait_for_completion              = 'wait_for_completion';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class SwitchOsdModeActionData
{
    const /* MY_Bool                          */ osd_mode                         = 'osd_mode';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class UninstallApkActionData
{
    const /* (char *)                         */ package                          = 'package';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class UpdateDvbChannelsActionData
{
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class UpdateFolderMarksActionData
{
    const /* int                              */ change_op                        = 'change_op';
    const /* (MY_StringArray *)               */ ids                              = 'ids';
    const /* (char *)                         */ marks_output_key                 = 'marks_output_key';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class UpdateImagesActionData
{
    const /* (char *)                         */ url_prefix                       = 'url_prefix';
    const /* (char *)                         */ storage_dir_name                 = 'storage_dir_name';
    const /* (MY_StringArray *)               */ names                            = 'names';
    const /* (char *)                         */ title                            = 'title';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class UpdateTvInfoActionData
{
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class UpdateWatchedMarksActionData
{
    const /* (MY_StringArray *)               */ item_ids                         = 'item_ids';
    const /* (MY_StringArray *)               */ movie_ids                        = 'movie_ids';
    const /* bool                             */ watched                          = 'watched';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class ViewItemParams
{
    const /* MY_Bool                          */ predefined                       = 'predefined';
    const /* MY_Bool                          */ item_paint_icon                  = 'item_paint_icon';
    const /* MY_Bool                          */ item_paint_caption               = 'item_paint_caption';
    const /* MY_Bool                          */ item_ui_state_paint_caption      = 'item_ui_state_paint_caption';
    const /* MY_Bool                          */ item_paint_unselected_caption    = 'item_paint_unselected_caption';
    const /* MY_FontSize                      */ item_caption_font_size           = 'item_caption_font_size';
    const /* MY_Bool                          */ item_paint_caption_within_icon   = 'item_paint_caption_within_icon';
    const /* (char *)                         */ item_caption_within_icon_color   = 'item_caption_within_icon_color';
    const /* NonNegativeInt                   */ item_padding_top                 = 'item_padding_top';
    const /* NonNegativeInt                   */ item_padding_bottom              = 'item_padding_bottom';
    const /* ImagePath                        */ icon_path                        = 'icon_path';
    const /* NonNegativeInt                   */ icon_width                       = 'icon_width';
    const /* NonNegativeInt                   */ icon_height                      = 'icon_height';
    const /* ArbitraryInt                     */ icon_dx                          = 'icon_dx';
    const /* ArbitraryInt                     */ icon_dy                          = 'icon_dy';
    const /* PositiveDouble                   */ icon_scale_factor                = 'icon_scale_factor';
    const /* ArbitraryInt                     */ icon_margin_top                  = 'icon_margin_top';
    const /* ArbitraryInt                     */ icon_margin_bottom               = 'icon_margin_bottom';
    const /* ArbitraryInt                     */ icon_margin_left                 = 'icon_margin_left';
    const /* ArbitraryInt                     */ icon_margin_right                = 'icon_margin_right';
    const /* ImagePath                        */ icon_sel_path                    = 'icon_sel_path';
    const /* NonNegativeInt                   */ icon_sel_width                   = 'icon_sel_width';
    const /* NonNegativeInt                   */ icon_sel_height                  = 'icon_sel_height';
    const /* ArbitraryInt                     */ icon_sel_dx                      = 'icon_sel_dx';
    const /* ArbitraryInt                     */ icon_sel_dy                      = 'icon_sel_dy';
    const /* PositiveDouble                   */ icon_sel_scale_factor            = 'icon_sel_scale_factor';
    const /* ArbitraryInt                     */ icon_sel_margin_top              = 'icon_sel_margin_top';
    const /* ArbitraryInt                     */ icon_sel_margin_bottom           = 'icon_sel_margin_bottom';
    const /* ArbitraryInt                     */ icon_sel_margin_left             = 'icon_sel_margin_left';
    const /* ArbitraryInt                     */ icon_sel_margin_right            = 'icon_sel_margin_right';
    const /* MY_VAlign                        */ icon_valign                      = 'icon_valign';
    const /* MY_HAlign                        */ item_layout                      = 'item_layout';
    const /* MY_Bool                          */ icon_keep_aspect_ratio           = 'icon_keep_aspect_ratio';
    const /* PositiveDouble                   */ icon_fit_scale_factor            = 'icon_fit_scale_factor';
    const /* NonNegativeInt                   */ item_caption_width               = 'item_caption_width';
    const /* MY_Bool                          */ item_caption_wrap_enabled        = 'item_caption_wrap_enabled';
    const /* ArbitraryInt                     */ item_caption_dy                  = 'item_caption_dy';
    const /* ArbitraryInt                     */ item_caption_sel_dy              = 'item_caption_sel_dy';
    const /* ArbitraryInt                     */ item_caption_dx                  = 'item_caption_dx';
    const /* NonNegativeInt                   */ item_caption_color               = 'item_caption_color';
    const /* (char *)                         */ item_sticker                     = 'item_sticker';
    const /* MY_Bool                          */ item_sticker_collage             = 'item_sticker_collage';
    const /* (char *)                         */ item_detailed_info               = 'item_detailed_info';
    const /* ImagePath                        */ item_detailed_icon_path          = 'item_detailed_icon_path';
    const /* NonNegativeInt                   */ item_detailed_icon_width         = 'item_detailed_icon_width';
    const /* NonNegativeInt                   */ item_detailed_icon_height        = 'item_detailed_icon_height';
    const /* (char *)                         */ item_detailed_info_sticker       = 'item_detailed_info_sticker';
    const /* (char *)                         */ item_detailed_info_tags          = 'item_detailed_info_tags';
    const /* ImagePath                        */ item_badge_icon_path             = 'item_badge_icon_path';
    const /* MY_Bool                          */ item_override_default_badge      = 'item_override_default_badge';
    const /* PositiveDouble                   */ item_sandwich_icon_scale_factor  = 'item_sandwich_icon_scale_factor';
    const /* (char *)                         */ item_extra_info                  = 'item_extra_info';
}

class ViewParams
{
    const /* PositiveInt                      */ num_cols                         = 'num_cols';
    const /* PositiveInt                      */ num_rows                         = 'num_rows';
    const /* PositiveInt                      */ item_width                       = 'item_width';
    const /* PositiveInt                      */ item_height                      = 'item_height';
    const /* MY_Bool                          */ animation_enabled                = 'animation_enabled';
    const /* MY_Bool                          */ scroll_animation_enabled         = 'scroll_animation_enabled';
    const /* MY_Bool                          */ popup_dialogs_enabled            = 'popup_dialogs_enabled';
    const /* MY_Bool                          */ marks_enabled                    = 'marks_enabled';
    const /* ViewOrientation                  */ orientation                      = 'orientation';
    const /* MY_Bool                          */ cycle_mode_enabled               = 'cycle_mode_enabled';
    const /* MY_AutoYesNoChoice               */ cycle_mode_gap                   = 'cycle_mode_gap';
    const /* PositiveInt                      */ cycle_mode_gap_width             = 'cycle_mode_gap_width';
    const /* ImagePath                        */ cycle_mode_gap_icon_path         = 'cycle_mode_gap_icon_path';
    const /* ImagePath                        */ background_path                  = 'background_path';
    const /* NonNegativeInt                   */ background_x                     = 'background_x';
    const /* NonNegativeInt                   */ background_y                     = 'background_y';
    const /* PositiveInt                      */ background_width                 = 'background_width';
    const /* PositiveInt                      */ background_height                = 'background_height';
    const /* MY_ViewBackgroundOrder           */ background_order                 = 'background_order';
    const /* ImagePath                        */ scroll_path                      = 'scroll_path';
    const /* NonNegativeInt                   */ scroll_x                         = 'scroll_x';
    const /* NonNegativeInt                   */ scroll_y                         = 'scroll_y';
    const /* PositiveInt                      */ scroll_height                    = 'scroll_height';
    const /* ImagePath                        */ mark_path                        = 'mark_path';
    const /* ArbitraryInt                     */ mark_dx                          = 'mark_dx';
    const /* ArbitraryInt                     */ mark_dy                          = 'mark_dy';
    const /* PositiveDouble                   */ mark_scale_factor                = 'mark_scale_factor';
    const /* MY_Bool                          */ optimize_full_screen_background  = 'optimize_full_screen_background';
    const /* MY_Bool                          */ paint_path_box                   = 'paint_path_box';
    const /* MY_Bool                          */ paint_path_box_background        = 'paint_path_box_background';
    const /* MY_Bool                          */ paint_widget                     = 'paint_widget';
    const /* MY_Bool                          */ paint_widget_background          = 'paint_widget_background';
    const /* MY_Bool                          */ paint_content_box_background     = 'paint_content_box_background';
    const /* MY_Bool                          */ paint_scrollbar                  = 'paint_scrollbar';
    const /* MY_Bool                          */ paint_icon_selection_box         = 'paint_icon_selection_box';
    const /* MY_Bool                          */ paint_help_line                  = 'paint_help_line';
    const /* MY_Bool                          */ paint_playback_help_line         = 'paint_playback_help_line';
    const /* MY_Bool                          */ paint_playback_status            = 'paint_playback_status';
    const /* MY_Bool                          */ paint_playback_volume_indicators = 'paint_playback_volume_indicators';
    const /* MY_Bool                          */ paint_details                    = 'paint_details';
    const /* MY_Bool                          */ paint_details_box_background     = 'paint_details_box_background';
    const /* NonNegativeInt                   */ help_line_text_color             = 'help_line_text_color';
    const /* ArbitraryInt                     */ icon_selection_box_dx            = 'icon_selection_box_dx';
    const /* ArbitraryInt                     */ icon_selection_box_dy            = 'icon_selection_box_dy';
    const /* NonNegativeInt                   */ icon_selection_box_width         = 'icon_selection_box_width';
    const /* NonNegativeInt                   */ icon_selection_box_height        = 'icon_selection_box_height';
    const /* MY_Bool                          */ paint_icon_badge_box             = 'paint_icon_badge_box';
    const /* MY_Bool                          */ hidden_badge_box                 = 'hidden_badge_box';
    const /* ArbitraryInt                     */ icon_badge_box_dx                = 'icon_badge_box_dx';
    const /* ArbitraryInt                     */ icon_badge_box_dy                = 'icon_badge_box_dy';
    const /* NonNegativeInt                   */ icon_badge_box_width             = 'icon_badge_box_width';
    const /* NonNegativeInt                   */ icon_badge_box_height            = 'icon_badge_box_height';
    const /* ArbitraryInt                     */ icon_badge_box_sel_dx            = 'icon_badge_box_sel_dx';
    const /* ArbitraryInt                     */ icon_badge_box_sel_dy            = 'icon_badge_box_sel_dy';
    const /* NonNegativeInt                   */ icon_badge_box_sel_width         = 'icon_badge_box_sel_width';
    const /* NonNegativeInt                   */ icon_badge_box_sel_height        = 'icon_badge_box_sel_height';
    const /* NonNegativeInt                   */ content_box_x                    = 'content_box_x';
    const /* NonNegativeInt                   */ content_box_y                    = 'content_box_y';
    const /* PositiveInt                      */ content_box_width                = 'content_box_width';
    const /* PositiveInt                      */ content_box_height               = 'content_box_height';
    const /* NonNegativeInt                   */ content_box_padding_left         = 'content_box_padding_left';
    const /* NonNegativeInt                   */ content_box_padding_top          = 'content_box_padding_top';
    const /* NonNegativeInt                   */ content_box_padding_right        = 'content_box_padding_right';
    const /* NonNegativeInt                   */ content_box_padding_bottom       = 'content_box_padding_bottom';
    const /* (char *)                         */ extra_content_objects            = 'extra_content_objects';
    const /* PositiveInt                      */ details_box_width                = 'details_box_width';
    const /* MY_Bool                          */ paint_item_info_in_details       = 'paint_item_info_in_details';
    const /* MY_Bool                          */ zoom_detailed_icon               = 'zoom_detailed_icon';
    const /* PositiveDouble                   */ detailed_icon_scale_factor       = 'detailed_icon_scale_factor';
    const /* MY_VAlign                        */ detailed_icon_valign             = 'detailed_icon_valign';
    const /* (char *)                         */ item_small_icon_name             = 'item_small_icon_name';
    const /* (char *)                         */ folder_small_icon_name           = 'folder_small_icon_name';
    const /* MY_FontSize                      */ item_detailed_info_font_size     = 'item_detailed_info_font_size';
    const /* NonNegativeInt                   */ item_detailed_info_rel_y         = 'item_detailed_info_rel_y';
    const /* NonNegativeInt                   */ item_detailed_info_title_color   = 'item_detailed_info_title_color';
    const /* NonNegativeInt                   */ item_detailed_info_text_color    = 'item_detailed_info_text_color';
    const /* MY_Bool                          */ item_detailed_info_auto_line_break = 'item_detailed_info_auto_line_break';
    const /* MY_Bool                          */ item_detailed_info_use_main_icon = 'item_detailed_info_use_main_icon';
    const /* MY_Bool                          */ paint_sandwich                   = 'paint_sandwich';
    const /* (char *)                         */ sandwich_base                    = 'sandwich_base';
    const /* (char *)                         */ sandwich_mask                    = 'sandwich_mask';
    const /* (char *)                         */ sandwich_cover                   = 'sandwich_cover';
    const /* NonNegativeInt                   */ sandwich_width                   = 'sandwich_width';
    const /* NonNegativeInt                   */ sandwich_height                  = 'sandwich_height';
    const /* NonNegativeInt                   */ sandwich_sel_width               = 'sandwich_sel_width';
    const /* NonNegativeInt                   */ sandwich_sel_height              = 'sandwich_sel_height';
    const /* PositiveDouble                   */ sandwich_icon_scale_factor       = 'sandwich_icon_scale_factor';
    const /* MY_Bool                          */ sandwich_icon_keep_aspect_ratio  = 'sandwich_icon_keep_aspect_ratio';
    const /* MY_Bool                          */ sandwich_icon_upscale_enabled    = 'sandwich_icon_upscale_enabled';
    const /* NonNegativeInt                   */ max_icon_width                   = 'max_icon_width';
    const /* NonNegativeInt                   */ max_icon_height                  = 'max_icon_height';
}

class WaitExtAppStartActionData
{
    const /* int                              */ delay                            = 'delay';
    const /* (char *)                         */ package                          = 'package';
    const /* (GuiAction *)                    */ error_action                     = 'error_action';
}

class WaitForIpAddressActionData
{
    const /* int                              */ timeout_sec                      = 'timeout_sec';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

class WgetActionData
{
    const /* (char *)                         */ id                               = 'id';
    const /* (char *)                         */ url                              = 'url';
    const /* (char *)                         */ post_data                        = 'post_data';
    const /* (MY_Properties *)                */ curl_opts                        = 'curl_opts';
    const /* (char *)                         */ target_path                      = 'target_path';
    const /* (char *)                         */ target_cmd                       = 'target_cmd';
    const /* (char *)                         */ result_key_prefix                = 'result_key_prefix';
    const /* (GuiAction *)                    */ post_action                      = 'post_action';
}

?>
